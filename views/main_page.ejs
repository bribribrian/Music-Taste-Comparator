
<!DOCTYPE html>
<html>

<head>
  <script src="https://d3js.org/d3.v5.min.js" charset="utf-8"></script>
  <link href="https://fonts.googleapis.com/css?family=Open+Sans+Condensed:700&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css?family=Noto+Serif|Open+Sans+Condensed:700&display=swap" rel="stylesheet">
  <title>
    Music Taste Comparator
  </title>
  <link rel='stylesheet' href='/stylesheets/reset.css' />
  <link rel='stylesheet' href='/stylesheets/main_page.css' />
  <link rel='stylesheet' href='/stylesheets/suggested_tracks.css' />
  <link rel='stylesheet' href='/stylesheets/mid_container.css' />
  <script src="https://kit.fontawesome.com/12ffa399b2.js" crossorigin="anonymous"></script>
</head>


<body class='body'>
    <div class='main-container1'>
    <div class='main-container2'>
    <div class='main-container3'>
    <div class='main-container4'>
    <div class='main-container'>
        <div class='side-bar'></div>
        <div class='mid-bar'>
            <div class='nav-bar-container'>
                <div class='main-title-container-outer'>
                    <div class='main-title-container-inner'>
                        <h1 class='main-title'>MUSIC TASTE COMPARATOR</h1>
                    </div>
                </div>
                <div class='demo-container-outer'>
                    <div class='demo-container-inner'>
                        <div class='instructions'>INSTRUCTIONS
                            <div class='instructions-dropdown'>
                                <div class='instructions-p'>
                                    <div class='instructions-title'>
                                        Welcome!
                                    </div>
                                    <div class='welcome-line'></div>
                                    <div class='instructions-content'>
                                        This App is still under developement.
                                    <br>
                                    <br>
                                        Please look forward to future updates!
                                    <br>
                                    <br>
                                        To compare your tastes to a friend's, ask them to make their "Top song of 2019" public, then search their username!
                                    <br>
                                    <br>
                                    For quick demo purposes, try searching some of the following users:
                                    <br>
                                    bribrianbribri
                                    <br>
                                    keenannichols
                                    <br>
                                    diggin11
                                    <br>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class='search-form-container-outer'>
                    <div class='search-form-container-inner'>
                        <form class='search-form' id="searchForm">
                            <div class='search-form-elements'>
                                <div class='enter-username'>ENTER A USERNAME:</div>
                                <input class='input' id='searchUser' type='text' value='username' spellcheck='false'></input>
                                <input class='submit-button' type='submit' value='SUBMIT'></input>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

            <div class='main-body-container'>
                <div class='track-info-container-border-outer'>
                    <div class='track-info-container-border'>
                        <div class='track-info-container' id="trackinfo" class="trackinfo"></div>
                    </div>
                </div>
                <div class='mid-container'>
                    <div class='canvas' id='canvas'></div>
                    <div class='canvas-sub-container'>
                        <div class='canvas-sub' id='canvas-sub'></div>
                    </div>
                    <div class='mid-bottom-outer'>
                        <div class='mid-bottom-inner'>
                            <div class='mid-bottom-body'>
                                <div class='mid-bottom-body-left' id='current-user-data'></div>
                                <div class='mid-bottom-body-mid' id='comparative-data'></div>
                                <div class='mid-bottom-body-right'id='comparative-data2'></div>
                            </div>
                            <div class='mid-bottom-line'></div>
                            <div class='footer'>
                                <div class='footer-info'>
                                    <div>Music Taste Comparator <span class='by'>by</span>Brian Klein</div>
                                </div>
                                <div class='footer-icons'>
                                    <a href='https://github.com/bribribrian'><i class="fab fa-github-square"></i></a>
                                    <a href='https://angel.co/bribribrian'><i class="fab fa-angellist"></i></a>
                                    <a href='https://www.linkedin.com/in/brian-klein-a5a400129/'><i class="fab fa-linkedin"></i></a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class='track-info-container-border-outer'>
                    <div class='track-info-container-border'>
                        <div class='track-info-container2' id='trackinfo2' class='trackinfo2'></div>
                    </div>
                </div>
            </div>
        </div>
        <div class='side-bar'></div>
    </div>
</div>
</div>
</div>
</div>
</body>
<!-- <script src="../API/spotify_api.js"></script> -->
<script>
    document.addEventListener("DOMContentLoaded", () => {
        const seachForm = document.getElementById("searchForm");
        seachForm.addEventListener("submit", handleSubmit);
    });
    
    function handleSubmit (e) {
        e.preventDefault();
        const searchUser = document.getElementById("searchUser");

        console.log(searchUser.value);
        fetchSearchedUser(searchUser.value);
    }

    function fetchSearchedUser(username) {
        const request = new XMLHttpRequest();
        request.open(
        "GET",
        `/searcheduser?username=${username}`,
        true
        );
        request.onload = this.ajaxSuccess.bind(request);
        request.send();
    }

    function ajaxSuccess() {
        if (this.status >= 200 && this.status < 400) {
            const data = JSON.parse(this.response);
            // console.log("this is the ajax response data");
            // console.log(data);
            let htmlOutput3 = "<div class='top-tracks-title'>Your Friend's Tracks:</div><div class='top-tracks-title-line'></div><ul class='tracks-ul'>";
            data.searchedUserTracksAudioData.forEach(track => {
                 htmlOutput3 += `<li class='track-name'>${track.name}</li>`;
            });
            htmlOutput3 += "</ul>";
            document.getElementById("trackinfo2").innerHTML = htmlOutput3;

            const searchedUserWordCount = data.searchedUserWordCount;
            // console.log('this is searchedUserWordCount')
            // console.log(searchedUserWordCount);
            // console.log('currentUserWordCount');
            // console.log(currentUserWordCount);
            let sortedSearchedUserWordCount = Object.values(searchedUserWordCount).sort(function(a, b) {return b.count - a.count});
            // console.log(sortedSearchedUserWordCount);
            let comparedUsersWordCount = {};
            sortedSearchedUserWordCount.forEach(word => {
                // console.log('word');
                // console.log(word);
                if(currentUserWordCount[word.word]) {
                    comparedUsersWordCount[word.word] = {word: word.word, count: currentUserWordCount[word.word].count + searchedUserWordCount[word.word].count}
                };
            })
            // console.log('comparedwordcount');
            // console.log(comparedUsersWordCount);
            let sortedComparedUsersWordCount = Object.values(comparedUsersWordCount).sort(function(a, b) {return b.count - a.count});


            let searchedUserArtistCount = [];
            let searchedUserTracksAudioData = data.searchedUserTracksAudioData;
            searchedUserTracksAudioData.forEach(track => {
                if(searchedUserArtistCount[track.artists[0].name]){
                    searchedUserArtistCount[track.artists[0].name].count++;
                } else {
                    searchedUserArtistCount[track.artists[0].name] = {name: track.artists[0].name, count: 1};
                };
            });
            let sortedSearchedUserArtistCount = Object.values(searchedUserArtistCount).sort(function(a, b) {return b.count - a.count});
            console.log(sortedSearchedUserArtistCount);

            const searchedUserGenreCollection = data.searchedUserGenreCollection;
            document.getElementById('canvas').innerHTML = '';
            Object.values(searchedUserGenreCollection).forEach(genre_obj => {
                if (genreCollection[genre_obj.genreName]) {
                    genreCollection[genre_obj.genreName].count++;
                } else {
                    genreCollection[genre_obj.genreName] = genre_obj;
                }
            })
            const genreCollectionArray2 = Object.values(genreCollection).map((obj, idx) => {
                obj.genreCode = idx;
                return obj;
            });
            // let newChildObj = {};
            let objChildrenArray = Array.from(dataObj.children);
            let combinedCollectionsObj = {name: "combinedUsersCollection", children: objChildrenArray};
            combinedCollectionsObj.children.forEach((child, idx) => {
                let newChildObj = {name: child.name, children: Array.from(child.children)};
                combinedCollectionsObj.children[idx] = newChildObj;
            });
            // console.log('this is newChildObj');
            // console.log(newChildObj);
            // console.log("this is the combinedCollectionsObj");
            // console.log(combinedCollectionsObj);
            // console.log("this is the dataObj - orig data")
            // console.log(dataObj);
            Object.keys(searchedUserGenreCollection).forEach(key => {
                combinedCollectionsObj.children.push({name: searchedUserGenreCollection[key].name, children: []});
            });
            data.searchedUserTracksAudioData.forEach(track => {
                track.genres.forEach(genre => {
                    combinedCollectionsObj.children.forEach(child => {
                        if (child.name === genre) {
                            child.children.push({name: track.name, value: 1, artist: track.artists[0].name, source: 'searchedUser'});
                        };
                    });
                });
            });
            // let compareObj = {};
            let compareArr = [];
            let percentCommon = 0;
            console.log('this is combinedCollectionsObj');
            console.log(combinedCollectionsObj);
            Object.values(dataObj.children).forEach((genreObj1, index) => {
                if (combinedCollectionsObj.children[index].children.length/genreObj1.children.length > 1) {
                // compareObj[newObj.children[index].name] = 2 - (newObj.children[index].children.length/genreObj1.children.length);
                    let compVar = 2 - (combinedCollectionsObj.children[index].children.length/genreObj1.children.length); 
                    if (compVar < 0) {
                        compVar = -1 * compVar;
                    } else if (compVar === 0) {
                        compVar = 0.9;
                    } else {
                        compVar = compVar;
                    }
                compareArr.push([combinedCollectionsObj.children[index].name, combinedCollectionsObj.children[index].children.length/compVar, combinedCollectionsObj.children[index].children])
                }
                compareArr.sort(function(a, b) {return b[1] - a[1]});
                percentCommon = Math.ceil((compareArr.length/combinedCollectionsObj.children.length) * 100) + '%';
            });
            let suggestedTracksArr = [];
            let increment;
            for (increment = 0; increment < compareArr[0][2].length; increment++) {
                if (compareArr[0][2][increment].source === 'searchedUser') {
                    suggestedTracksArr.push(compareArr[0][2][increment]);
                };
            };
            suggestedTracksArr = suggestedTracksArr.slice(0,5);
            let htmlOutput4 = "<div class='suggested-tracks-ul-div'><ul class='suggested-tracks-ul'>";
            suggestedTracksArr.forEach(track => {
                 htmlOutput4 += `<li class='suggested-track'>${track.name} <span class='suggested-track-by'> by </span> ${track.artist}</li>`;
            });
            htmlOutput4 += "</ul>";

            let searchedUserTopArtistHtmlOutput = '';
            if (sortedSearchedUserArtistCount[0].name.length <= 4) {
                searchedUserTopArtistHtmlOutput = `<div class='searched-user-top-artist1'>${sortedSearchedUserArtistCount[0].name}</div>`;
            } else if (sortedSearchedUserArtistCount[0].name.length >= 20) {
                searchedUserTopArtistHtmlOutput = `<div class='searched-user-top-artist3'>${sortedSearchedUserArtistCount[0].name}</div>`;
            } else {
                searchedUserTopArtistHtmlOutput = `<div class='searched-user-top-artist2'>${sortedSearchedUserArtistCount[0].name}</div>`;
            };
            // console.log('this is the suggest tracks arr');
            // console.log(suggestedTracksArr);
            // console.log('this is the top genre keyed in');
            // console.log(combinedCollectionsObj);
            // console.log(newObj);
            // console.log("this is the compareArr");
            // console.log(compareArr);
            // console.log('this is the sortedCurrentUserWordCount');
            // console.log(sortedCurrentUserWordCount);

            // console.log(newObj);
            document.getElementById("canvas").innerHTML = "";
            document.getElementById("comparative-data").innerHTML = 
                `<div class='comparative-data-output'>
                    <div class='comparative-genre-container'>
                        <div class='user-stats-title3'>Comparison</div>
                            <div class='user-stats-container3'>
                                <div class='top-genre-container'>
                                    <div class='top-genre-title'>Compatable Genre:</div>
                                    <div class='top-genre'>${compareArr[0][0]}</div>
                                </div>
                                <div class='common-genre-container'>
                                    <div class='common-genre-title'>Common Genres:</div>
                                    <div class='common-genre'>${compareArr.length}</div>
                                </div>
                                <div class='count-genre-container'>
                                    <div class='count-genre-title'>Genres Represented:</div>
                                    <div class='count-genre'>${combinedCollectionsObj.children.length}</div>
                                </div>
                                <div class='percent-container'>
                                    <div class='percent-title'>Commonality:</div>
                                    <div class='percent'>${percentCommon}</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>`;
            document.getElementById("comparative-data2").innerHTML = 
                `<div class='comparative-data-output'>
                    <div class='comparative-genre-container'>
                        <div class='user-stats-title2'>${searchUser.value}'s</div>
                        <div class='user-stats-container2'>
                            <div class='top-genre-container2'>
                                <div class='top-genre-title'>Top Artist:</div>
                                <div class='searched-user-top-artist' id='searched-user-top-artist'></div>
                            </div>
                            <div class='count-genre-container2'>
                                <div class='count-genre-title'>Keyword Combined:</div>
                                <div class='percent'>${sortedComparedUsersWordCount[0].word}</div>
                            </div>
                            <div class='percent-container2'>
                                <div class='percent-title'>Keyword:</div>
                                <div class='common-genre'>${sortedSearchedUserWordCount[0].word}</div>
                            </div>
                        </div>
                        <div class='suggested-tracks-container'>
                            <div class='suggested-tracks-button'>SUGGESTED <span class='tracks'>TRACKS</span>
                                <div class='suggested-tracks-dropdown'>
                                    <div class='suggested-tracks-p'>
                                        <div class='suggested-tracks-title'>
                                            Suggested Tracks:
                                        </div>
                                        <div class='suggested-tracks-line'></div>
                                        <div class='suggested-tracks-content' id='suggested-tracks-content'></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>`;
            document.getElementById("suggested-tracks-content").innerHTML = htmlOutput4;
            document.getElementById("searched-user-top-artist").innerHTML = searchedUserTopArtistHtmlOutput;
            createSVG();
            createPie(combinedCollectionsObj);
        } else {
        // error
        }

    }

    const trackAttributes = <%- JSON.stringify(tracks_audiodata) %>;
    const genreCollection = <%- JSON.stringify(genre_collection) %>;
    const currentUserWordCount = <%- JSON.stringify(currentUserWordCount) %>;
    // console.log('this is the original genreCollection Obj');
    // console.log(genreCollection);
    // console.log('this is the original trackAttributes');
    // console.log(trackAttributes);
    const genreCollectionArray1 = Object.values(JSON.parse(JSON.stringify(genreCollection))).map((obj, idx) => {
        obj.genreCode = idx;
        return obj;
    }); 
    let htmlOutput1 = "<div class='top-tracks-title'>Your Top Tracks:</div><div class='top-tracks-title-line'></div><ul class='tracks-ul'>";
    trackAttributes.forEach(trackInfo => {
        htmlOutput1 += `<li class='track-name'>${trackInfo.name}</li>`;
    });
    htmlOutput1 += "</ul>";
    
    document.getElementById('trackinfo').innerHTML = htmlOutput1;
    // document.getElementById('');
    function createSVG() {
        svg = d3.select(".canvas")
        .append("svg")
        // .attr("width", 500)
        // .attr("height", 500)
        .style('max-width', '100%')
        .style('height', 'auto')
        .style('font', '10px sans-serif')
        .style('margin', '5px');
    }

    function  createPie(data_obj) {
        const data = data_obj;
        const width = 700;
        const height = 700;
        const radius = width/2;
        const format = d3.format(",d");
        const color = d3.scaleOrdinal(d3.quantize(d3.interpolateRainbow, 13));
        function autoBox() {
            const {x, y, width, height} = this.getBBox();
            return [x, y, width, height];
        };
        const arc = d3.arc()
        .startAngle(d => d.x0)
        .endAngle(d => d.x1)
        .padAngle(d => Math.min((d.x1 - d.x0) / 2, 0.005))
        .padRadius(radius / 2)
        .innerRadius(d => d.y0)
        .outerRadius(d => d.y1 - 1);
            
        const partition = data => d3.partition()
        .size([2 * Math.PI, radius])
        (d3.hierarchy(data)
        .sum(d => d.value)
        .sort((a, b) => b.value - a.value));

        d3.selectAll("div.tooltip").remove()
        const div = d3.select(".canvas-sub").append("div")	
        .attr("class", "tooltip")				
        .style("opacity", 0);

        const root = partition(data);
        
        svg.append('g')
            .attr('fill-opacity', .8)
            .selectAll('path')
            .data(root.descendants().filter(d => d.depth))
            .enter().append('path')
            .attr('fill', d => { while ( d.depth > 1 ) d = d.parent; return color(d.data.name); })
            .attr('d', arc)
            .attr('fill-opacity', .8)
            .style('stroke', 'transparent')
            .on("mouseover", handleMouseOver)
            .on("mouseout", handleMouseOut)
            .append('title')
            .text(d => `${d.ancestors().map(d => d.data.name).reverse().join("/")}\n${format(d.value)}`);

        svg.append('g')
            .attr('pointer-event', 'none')
            .attr('text-anchor', 'middle')
            .selectAll('text')
            .data(root.descendants().filter(d => d.depth && (d.y0 + d.y1) / 2 * (d.x1 - d.x0) > 6))
           
        function handleMouseOver(d, i) { 
            d3.select(this)
            .style('stroke', 'purple')
            .attr("fill-opacity", 1)
            .transition()
            .duration(200)
            .attr("stroke-width", 3)
            div.transition()		
            .duration(200)		
            .style("opacity", 1);
            let editName = ''
            if (d.data.name) {
                if (d.data.name.length < 25){
                    editName = d.data.name
                } else {
                     editName = d.data.name.slice(0,23) + '...'
                };	
            };
                div	.html(editName)
        }

        function handleMouseOut(d, i) {
                d3.select(this)
                .transition()
                .duration(300)
                .attr('fill-opacity', .7)
                // .attr('fill', genreColorScale(i))
                .style('stroke', 'transparent')
                // .style('mix-blend-mode', 'multiply')
                // .style('opacity', .7)
                div.transition()		
                .duration(200)		
                .style("opacity", 0);
        }   
        svg.attr('viewBox', autoBox);
    }

    let dataObj = {}
    dataObj.name = 'curruentUserCollection';
    dataObj.children = [];

    Object.keys(genreCollection).forEach(genre => {
        dataObj.children.push({name: genreCollection[genre].genreName, children: [] });
    })
    console.log('this is the current users trackAttributes');
    console.log(trackAttributes);
    let currentUserArtistCount = [];
    trackAttributes.forEach(track => {
        if(currentUserArtistCount[track.artists[0].name]){
            currentUserArtistCount[track.artists[0].name].count++;
        } else {
            currentUserArtistCount[track.artists[0].name] = {name: track.artists[0].name, count: 1};
        };
        track.genres.forEach(genre => {
            dataObj.children.forEach(child => {
                if (child.name === genre) {
                    child.children.push({name: track.name, value: 1, artist: track.artists[0].name, source: 'currentUser'});
                };
            });
        });
    });
    console.log(currentUserArtistCount);
    let sortedCurrentUserArtistCount = Object.values(currentUserArtistCount).sort(function(a, b) {return b.count - a.count});
    console.log(sortedCurrentUserArtistCount);
    console.log(dataObj);
    let sortedDataObj = Object.values(dataObj.children).sort(function(a, b) {return b.children.length - a.children.length});
    let sortedCurrentUserWordCount = Object.values(currentUserWordCount).sort(function(a, b) {return b.count - a.count});
    let htmlOutput2 = 
        `<div class='comparative-data-output'>
            <div class='comparative-genre-container'>
                <div class='user-stats-title'>Your Stats</div>
                    <div class='user-stats-container'>
                    <div class='top-genre-container'>
                        <div class='top-genre-title'>Favorite Artist:</div>
                        <div class='common-genre'>${sortedCurrentUserArtistCount[0].name}</div>
                    </div>
                    <div class='common-genre-container'>
                        <div class='common-genre-title'>${sortedCurrentUserArtistCount[0].name} Songs:</div>
                        <div class='percent'>${sortedCurrentUserArtistCount[0].count}</div>
                    </div>
                    <div class='count-genre-container'>
                        <div class='count-genre-title'>Favorite Genre:</div>
                        <div class='top-genre'>${sortedDataObj[0].name}</div>
                    </div>
                    <div class='percent-container'>
                        <div class='percent-title'>Most Common Keyword:</div>
                        <div class='count-genre'>${sortedCurrentUserWordCount[0].word}</div>
                    </div>
                </div>
            </div>
        </div>`;
    // console.log(currentUserWordCount);
    // console.log(sortedDataObj);
    document.getElementById('current-user-data').innerHTML = htmlOutput2;

    // console.log('this is the currentUserArtistCount');
    // console.log(currentUserArtistCount);
    // console.log('this is the current user dataObj');
    // console.log(dataObj);
    createSVG();
    createPie(dataObj);
</script>
