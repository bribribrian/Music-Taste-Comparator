
<!DOCTYPE html>
<html>

<head>
  <script src="https://d3js.org/d3.v5.min.js" charset="utf-8"></script>
  <link href="https://fonts.googleapis.com/css?family=Open+Sans+Condensed:700&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css?family=Noto+Serif|Open+Sans+Condensed:700&display=swap" rel="stylesheet">
  <title>
    Music Taste Comparator
  </title>
  <link rel='stylesheet' href='/stylesheets/main_page.css' />
</head>


<body class='body'>
    <div class='nav-bar-container'>
        <div class='main-title-container-outer'>
            <div class='main-title-container-inner'>
                <h1 class='main-title'>MUSIC TASTE COMPARATOR</h1>
            </div>
        </div>
        <div class='demo-container-outer'>
            <div class='demo-container-inner'>
                <div class='demo'>For demo purposes, try searching: bribrianbribri, keenannichols, diggin11</div>
                <div class='instructions'>Tell your friends to make playlist "Top songs of 2019" public, then search</div>
            </div>
        </div>
        <div class='search-form-container-outer'>
            <div class='search-form-container-inner'>
                <form class='search-form' id="searchForm">
                    <div class='search-form-elements'>
                        <div>ENTER A USERNAME</div>
                        <input class='input' id='searchUser' type='text' value='username'></input>
                        <input class='submit-button' type='submit' value='SUBMIT'></input>
                    </div>
                </form>
            </div>
        </div>
    </div>


    <div class='main-body-container'>
        <div class='track-info-container-border-outer'>
            <div class='track-info-container-border'>
                <div class='track-info-container' id="trackinfo" class="trackinfo"></div>
            </div>
        </div>
        <div class='mid-container'>
            <div class='canvas' id='canvas'></div>
            <div class='canvas-sub-container'>
                <div class='canvas-sub' id='canvas-sub'></div>
            </div>
            <div class='mid-bottom-outer'>
                <div class='mid-bottom-inner'>

                </div>
            </div>
        </div>

        <div class='track-info-container-border-outer'>
            <div class='track-info-container-border'>
                <div class='track-info-container2' id='trackinfo2' class='trackinfo2'></div>
            </div>
        </div>
    </div>
</body>
<!-- <script src="../API/spotify_api.js"></script> -->
<script>
    document.addEventListener("DOMContentLoaded", () => {
        const seachForm = document.getElementById("searchForm");
        seachForm.addEventListener("submit", handleSubmit);
    });
    
    function handleSubmit (e) {
        e.preventDefault();
        const searchUser = document.getElementById("searchUser");

        console.log(searchUser.value);
        fetchSearchedUser(searchUser.value);
    }

    function fetchSearchedUser(username) {
        const request = new XMLHttpRequest();
        request.open(
        "GET",
        `/searcheduser?username=${username}`,
        true
        );
        request.onload = this.ajaxSuccess.bind(request);
        request.send();
    }

    function ajaxSuccess() {
        if (this.status >= 200 && this.status < 400) {
            const data = JSON.parse(this.response);
            console.log(data);
            let htmlOutput2 = "<div class='top-tracks-title'>Your Friend's Tracks:</div><ul>";
            data.tracks_audiodata.forEach(track => {
                htmlOutput2 += `<li class='track-name'>${track.name}</li>`;
            });
            htmlOutput2 += "</ul>";
            document.getElementById("trackinfo2").innerHTML = htmlOutput2;
            const genre_collection2 = data.genre_collection2;
            document.getElementById('canvas').innerHTML = '';
            Object.values(genre_collection2).forEach(genre_obj => {
                if (genreCollection[genre_obj.genreName]) {
                    genreCollection[genre_obj.genreName].count++;
                } else {
                    genreCollection[genre_obj.genreName] = genre_obj;
                }
            })
            const genreCollectionArray2 = Object.values(genreCollection).map((obj, idx) => {
                obj.genreCode = idx;
                return obj;
            });
            // console.log(dataObj);
            // console.log(genre_collection2);
            // createBubbleChart(genreCollectionArray2);
            Object.keys(genre_collection2).forEach(key => {
                dataObj.children.push({name: genre_collection2[key].name, children: []})
            });
            data.tracks_audiodata.forEach(track => {
                track.genres.forEach(genre => {
                    dataObj.children.forEach(child => {
                        if (child.name === genre) {
                            child.children.push({name: track.name, value: 1})
                        }
                    });
                });
            });
            document.getElementById("canvas").innerHTML = "";
            createSVG2();
            createPie(dataObj);
        } else {
        // error
        }

    }

    
    // console.log(track_info);
    const trackAttributes = <%- JSON.stringify(tracks_audiodata) %>;
    const genreCollection = <%- JSON.stringify(genre_collection) %>;
    console.log(genreCollection);
    console.log(trackAttributes);
    const genreCollectionArray1 = Object.values(JSON.parse(JSON.stringify(genreCollection))).map((obj, idx) => {
        obj.genreCode = idx;
        return obj;
    }); 
    let htmlOutput = "<div class='top-tracks-title'>Your Top Tracks:</div><ul>";
    // console.log(trackAttributes);
    // console.log(genreCollectionArray1);
    trackAttributes.forEach(trackInfo => {
        htmlOutput += `<li class='track-name'>${trackInfo.name}</li>`;
    });
    htmlOutput += "</ul>";
    // console.log(genreCollection);
    // document.getElementById("sessionData").innerHTML = `Your session data:
    // <br /> ${sessionData}`;
    // document.getElementById("trackinfo").innerHTML = function(trackAttriubutes) {
    //     trackAttributes.forEach(track => {
    //         return <div>track.title</div>
    //     }
    // )};
    
    document.getElementById("trackinfo").innerHTML = htmlOutput;
    //`Your tracks:
    // <br /> 
    // ${trackAttributes[0].title}`
    
    // const circleRadiusScale = d3.scaleSqrt()
    //     .domain(populationExtent)
    //     .range([circleSize.min, circleSize.max]);

    // const forces,
    //   forceSimulation;

    // d3.queue()
    // .defer(d3.csv, "genres")
    // .await(createBubbleChart);

    function createBubbleChart(genres_collection) {
        const counts = [];
        genres_collection.forEach(genre_obj => {
            counts.push(genre_obj.count);
        });

        const countExtent = d3.extent(counts);

        var genreColorScale = d3.scaleOrdinal(d3.schemeCategory10);
            // .domain([0,1,2]);

        var width = 800,
            height = 800;
            // clusterPadding = .5,
            // padding = 1.0;
        var svg,
            circles,
            circleSize = { min: 2, max: 60 };
        var circleRadiusScale = d3.scaleSqrt()
            .domain(countExtent)
            .range([circleSize.min, circleSize.max]);
        var forces,
            forceSimulation;

        // var div = d3.select(".canvas").append("div")
        //     .attr("class", "tooltip")
        //     .style("opacity", 0);

        createSVG();
        createCircles();
        createForces();
        createForceSimulation();
    
        // var div = d3.select(".canvas").append("div")
        //     .attr("class", "tooltip")
        //     .style("opacity", 0);

        function createSVG() {
        svg = d3.select(".canvas")
        .append("svg")
            .attr("width", width)
            .attr("height", height);
        }

        function createCircles() {
            var formatCount = d3.format(",");
            circles = svg.selectAll("circle")
                .data(genres_collection)
                .enter()
                    .append("circle")
                    .attr("r", function(g) { return circleRadiusScale(g.count); })
                    .style("mix-blend-mode", "multiply")
                    // .style("isolation", "isolate")
                    // .attr("cx", function(d) { 
                    //     debugger;
                    //     return d.count * 2; })
                    // .attr("cy", function(d) { return d.count; })
                    .on("mouseover", handleMouseOver)
                    .on("mouseout", handleMouseOut)
                    // .style("padding", 50);
            updateCircles();

            // function updateGenreInfo(genre) {
            //     var info = "";
            //         if (genre) {
            //             info = [genre.genreName, formatCount(genre.count)].join(": ");
            //         }
            //     d3.select("#genre-info").html(info);
            //     }
            function handleMouseOver(d, i) { 
                d3.select(this)
                .attr('fill', 'blue')
                .style('stroke', 'black')
                .style("opacity", 1)
                div.transition()
                .duration(200)
                .style("opacity", 1);
                div.html(`${d.genreName}: ${d.count}`)
                // .style('mix-blend-mode', 'screen')
                // .style("isolation", "isolate")
                }

                function handleMouseOut(d, i) {
                d3.select(this)
                .attr('fill', genreColorScale(i))
                .style('stroke', 'white')
                .style('mix-blend-mode', 'multiply')
                }

        }

        
        // function collide(alpha) {
        // var quadtree = d3.quadtree(circles);
        // return function(d) {
        //     var r = d.radius + circleSize.max + Math.max(padding, clusterPadding),
        //         nx1 = d.x - r,
        //         nx2 = d.x + r,
        //         ny1 = d.y - r,
        //         ny2 = d.y + r;
        //     quadtree.visit(function(quad, x1, y1, x2, y2) {
        //     if (quad.point && (quad.point !== d)) {
        //         var x = d.x - quad.point.x,
        //             y = d.y - quad.point.y,
        //             l = Math.sqrt(x * x + y * y),
        //             r = d.radius + quad.point.radius + (d.cluster === quad.point.cluster ? padding : clusterPadding);
        //         if (l < r) {
        //         l = (l - r) / l * alpha;
        //         d.x -= x *= l;
        //         d.y -= y *= l;
        //         quad.point.x += x;
        //         quad.point.y += y;
        //         }
        //     }
        //     return x1 > nx2 || x2 < nx1 || y1 > ny2 || y2 < ny1;
        //     });
        // };
        // }




        function updateCircles() {
        svg.selectAll('circle')
        .attr("fill", function(g) {
            return genreColorScale(g.genreCode);
        });
        }



        function createForces() {
            var forceStrength = -.0055;
        

            forces = {
            combine:  createCombineForces()
            };

            function createCombineForces() {
                return {
                    x: d3.forceX(-420).strength(forceStrength),
                    y: d3.forceY(-420).strength(forceStrength)
                };
            }
        }

            function createForceSimulation() {
                forceSimulation = d3.forceSimulation()
                .force("x", forces.combine.x)
                .force("y", forces.combine.y)
                // .force("collide", d3.forceCollide(d => d.radius * 1.2).strength(1))
                forceSimulation.nodes(genres_collection)
                .on("tick", function() {
                    circles
                    .attr("cx", function(d) { return d.x * 2.37; })
                    .attr("cy", function(d) { return d.y * 2.37; })
                });
            }

            // function forceCollide(g) {
            // // return circleRadiusScale(g.Count -5);
            // };

            // function updateForces(forces) {
            //  forceSimulation
            //     .force("x", forces.x)
            //     .force("y", forces.y)
            //     .force("collide", d3.forceCollide(forceCollide))
            //     .alphaTarget(0.5)
            //     .restart();
            // }

    }   
    // createBubbleChart(genreCollectionArray1);
    function createSVG2() {
        svg = d3.select(".canvas")
        .append("svg")
            // .attr("width", 500)
            // .attr("height", 500)
            .style('max-width', '100%')
            .style('height', 'auto')
            .style('font', '10px sans-serif')
            .style('margin', '5px');
    }

    function  createPie(data_obj) {
            const data = data_obj;
            const width = 700;
            const height = 700;
            const radius = width/2;
            const format = d3.format(",d");
            const color = d3.scaleOrdinal(d3.quantize(d3.interpolateRainbow, 13));
            function autoBox() {
                const {x, y, width, height} = this.getBBox();
                return [x, y, width, height];
            };
            const arc = d3.arc()
            .startAngle(d => d.x0)
            .endAngle(d => d.x1)
            .padAngle(d => Math.min((d.x1 - d.x0) / 2, 0.005))
            .padRadius(radius / 2)
            .innerRadius(d => d.y0)
            .outerRadius(d => d.y1 - 1);
            
            const partition = data => d3.partition()
            .size([2 * Math.PI, radius])
            (d3.hierarchy(data)
            .sum(d => d.value)
            .sort((a, b) => b.value - a.value));
            
            const div = d3.select(".canvas-sub").append("div")	
                .attr("class", "tooltip")				
                .style("opacity", 0);

            const root = partition(data);
            // const svg = d3.create('svg')
            //         .style('max-width', '100%')
            //         .style('height', 'auto')
        //         .style('font', '10px sans-serif')
        //         .style('margin', '25px');
            
        svg.append('g')
            .attr('fill-opacity', .7)
            .selectAll('path')
            .data(root.descendants().filter(d => d.depth))
            .enter().append('path')
                .attr('fill', d => { while ( d.depth > 1 ) d = d.parent; return color(d.data.name); })
                // .attr('fill', d => {while})
                .attr('d', arc)
                .attr('fill-opacity', .7)
            .style('stroke', 'transparent')
            .on("mouseover", handleMouseOver)
            .on("mouseout", handleMouseOut)
            .append('title')
                .text(d => `${d.ancestors().map(d => d.data.name).reverse().join("/")}\n${format(d.value)}`);


        svg.append('g')
            .attr('pointer-event', 'none')
            .attr('text-anchor', 'middle')
            .selectAll('text')
            .data(root.descendants().filter(d => d.depth && (d.y0 + d.y1) / 2 * (d.x1 - d.x0) > 6))
            // .enter().append('text')
            //     .attr('transform', function(d) {
            //         const x = (d.x0 + d.x1) / 2 * 180 / Math.PI;
            //         const y = (d.y0 + d.y1) / 2;
            //         return `rotate(${x - 90}) translate(${y}, 0) rotate(${x < 180 ? 0 :180 })`;
            //     })
            //     .attr('dy', '0.35em')
            //     .text(d => d.data.name);
        
        function handleMouseOver(d, i) { 
                d3.select(this)
                // .attr('fill', 'blue')
                .style('stroke', 'purple')
                .attr("fill-opacity", 1)
                .transition()
                .duration(200)
                .attr("stroke-width", 3)
                div.transition()		
                .duration(200)		
                .style("opacity", 1);		
                div	.html(d.data.name)
                // .style("left", (d3.event.pageX) + "px")		
                // .style("top", (d3.event.pageY - 28) + "px");	
                
                // .append('text')
                // .text(d => d.data.name)
                // .attr("fill-opacity", 1);
                // div.html(`${d.genreName}: ${d.count}`)
                // .style('mix-blend-mode', 'screen')
                // .style("isolation", "isolate")
        }

        function handleMouseOut(d, i) {
                d3.select(this)
                .transition()
                .duration(300)
                .attr('fill-opacity', .7)
                // .attr('fill', genreColorScale(i))
                .style('stroke', 'transparent')
                // .style('mix-blend-mode', 'multiply')
                // .style('opacity', .7)
                div.transition()		
                .duration(200)		
                .style("opacity", 0);
        }   




        svg.attr('viewBox', autoBox);
    }
    let dataObj = {}
    dataObj.name = 'genreCollectionName';
    dataObj.children = [];

    Object.keys(genreCollection).forEach(genre => {
        // dataObj.children.push({name: genreCollection[genre].genreName, value: genreCollection[genre].count})
        dataObj.children.push({name: genreCollection[genre].genreName, children: [] });
    })
    trackAttributes.forEach(track => {
        track.genres.forEach(genre => {
            dataObj.children.forEach(child => {
                if (child.name === genre) {
                    child.children.push({name: track.name, value: 1})
                }
            })
        })
    })
    createSVG2();
    createPie(dataObj);
</script>